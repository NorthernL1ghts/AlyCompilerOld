;#;Copyright (c) 2025 NorthernL1ghts. All rights reserved.

;#;This file is part of the AlyCompiler.
;#;Unauthorized copying, modification, or distribution of this file,
;#;via any medium, is strictly prohibited except as permitted under
;#;the terms outlined in the LICENSE file.

;#;For licensing details, contributions, or inquiries, refer to LICENSE
;#;or contact:
;#;NorthernL1ghts

; This is a comment. It will end at the newline.
# This is also a comment.

; This is a variable declaration with initialization.
a : integer = 69

; This is a variable re-assignment.
a := 420

; This is another variable declaration and re-assignment.
; When a declaration has no initialized value, it is zero.
b : integer
b := 42

; This is an error! We should catch this as a variable re-definition.
;b : integer

; This is a function definition with two integer arguments that returns
; an integer.
defun foo (c:integer, b:integer):integer {
    ; These lines of code are to test function body.
    c := 10
    c := 5
    c := 42
    c := 69
    c := 420
    c := 69
}

; This is a function call
; For now, this errors because we no do function calls :^)
foo(20, 34, 420)

; This is the newly conceptualized way to define functions using a lambda-like syntax.
; Functions can now be assigned to variables, allowing for flexible reuse and inline execution.
; The structure ensures that argument lists and function bodies remain encapsulated within brackets.
; This approach could support closures, higher-order functions, and potentially currying.
;foo : function = [() {}]

; This is an inline lambda expression that takes an integer argument.
; The function assigns a new value to the parameter and returns it.
; The last expression in the function body acts as the return value.

;; TODO: Support this lambda syntax!
;[(a : integer) { a := 25  a }] ()

; TODO: Allow function assignment or something?
;foo : function = [(x : integer) { x }]